import streamlit as st
from connect import get_connection

def render_manage_warehouse():
    st.title("üè≠ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º")

    # 1) –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
    with get_connection() as conn:
        with conn.cursor() as cur:
            cur.execute(
                """
                SELECT c.item_id, c.name, s.company_name
                FROM catalog c
                JOIN suppliers s ON c.supplier_id = s.supplier_id
                """
            )
            rows = cur.fetchall()
    if not rows:
        st.info("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
        return

    # 2) –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "–¢–æ–≤–∞—Ä [name] –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ [supplier]"
    item_map = {
        f"–¢–æ–≤–∞—Ä ¬´{item_name}¬ª –æ—Ç ¬´{supplier_name}¬ª": item_id
        for item_id, item_name, supplier_name in rows
    }
    selection = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä", list(item_map.keys()))
    item_id = item_map[selection]

    # 3) –û–ø–µ—Ä–∞—Ü–∏—è: –î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å
    operation = st.radio("–û–ø–µ—Ä–∞—Ü–∏—è", ["–î–æ–±–∞–≤–∏—Ç—å", "–£–¥–∞–ª–∏—Ç—å"])

    # –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
    sale_price = None
    if operation == "–£–¥–∞–ª–∏—Ç—å":
        sale_price = st.number_input(
            "–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏", min_value=0.0, step=0.01, format="%.2f"
        )

    # 4) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
    qty = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", min_value=1, step=1)

    # 5) –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
    if st.button("–ü—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏—é"):
        with get_connection() as conn:
            with conn.cursor() as cur:
                # 5.1) –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
                cur.execute(
                    "SELECT price FROM catalog WHERE item_id = %s",
                    (item_id,)
                )
                price_catalog = cur.fetchone()[0]

                # 5.2) –≤—ã—á–∏—Å–ª—è–µ–º –¥–µ–Ω–µ–∂–Ω—ã–π –æ–±—ä—ë–º
                if operation == "–î–æ–±–∞–≤–∏—Ç—å":
                    monetary_volume = price_catalog * qty
                else:
                    monetary_volume = (sale_price or 0) * qty

                # 5.3) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
                success = True

                # 5.4) –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞
                cur.execute(
                    "SELECT quantity FROM warehouse WHERE item_id = %s",
                    (item_id,)
                )
                row = cur.fetchone()
                if row:
                    current_qty = row[0]
                    if operation == "–î–æ–±–∞–≤–∏—Ç—å":
                        new_qty = current_qty + qty
                        cur.execute(
                            "UPDATE warehouse SET quantity = %s, last_updated = NOW() WHERE item_id = %s",
                            (new_qty, item_id)
                        )
                    else:  # –£–¥–∞–ª–µ–Ω–∏–µ
                        if current_qty < qty:
                            success = False
                            st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ.")
                        else:
                            new_qty = current_qty - qty
                            cur.execute(
                                "UPDATE warehouse SET quantity = %s, last_updated = NOW() WHERE item_id = %s",
                                (new_qty, item_id)
                            )
                else:
                    if operation == "–î–æ–±–∞–≤–∏—Ç—å":
                        cur.execute(
                            "INSERT INTO warehouse (item_id, quantity) VALUES (%s, %s)",
                            (item_id, qty)
                        )
                    else:
                        success = False
                        st.error("–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.")

                # 5.5) —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                cur.execute(
                    """
                    INSERT INTO transactions
                        (item_id, operation, quantity, monetary_volume, success)
                    VALUES (%s, %s, %s, %s, %s)
                    """,
                    (item_id, operation.lower(), qty, monetary_volume, success)
                )
            conn.commit()
        # 6) –∏—Ç–æ–≥–æ–≤—ã–π feedback
        if success:
            st.success("–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞.")
