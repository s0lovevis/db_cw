import streamlit as st
import psycopg2
from connect import get_connection
import pandas as pd

def render_manage_decision_makers():
    st.title("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –õ–ü–†–æ–≤")

    # –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –õ–ü–†
    def add_dm(last_name, first_name, middle_name, age):
        if not last_name or not first_name or not age:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (—Ñ–∞–º–∏–ª–∏—è, –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç).")
            return
        with get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(
                    "INSERT INTO decision_makers (last_name, first_name, middle_name, age) VALUES (%s, %s, %s, %s)",
                    (last_name, first_name, middle_name, age)
                )
                conn.commit()
                st.success("–õ–ü–† –¥–æ–±–∞–≤–ª–µ–Ω.")

    # –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –õ–ü–†
    def update_dm(dm_id, last_name, first_name, middle_name, age):
        if not last_name or not first_name or not age:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (—Ñ–∞–º–∏–ª–∏—è, –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç).")
            return
        with get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT 1 FROM decision_makers WHERE dm_id = %s", (dm_id,))
                if not cur.fetchone():
                    st.error("–õ–ü–† —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                cur.execute(
                    "UPDATE decision_makers SET last_name = %s, first_name = %s, middle_name = %s, age = %s WHERE dm_id = %s",
                    (last_name, first_name, middle_name, age, dm_id)
                )
                conn.commit()
                st.success("–õ–ü–† –æ–±–Ω–æ–≤–ª–µ–Ω.")

    # –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –õ–ü–†
    def delete_dm(dm_id: int) -> None:
        with get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT 1 FROM decision_makers WHERE dm_id = %s", (dm_id,))
                if not cur.fetchone():
                    st.error("–õ–ü–† —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                try:
                    cur.execute("DELETE FROM decision_makers WHERE dm_id = %s", (dm_id,))
                    conn.commit()
                    st.success("–õ–ü–† —É–¥–∞–ª—ë–Ω.")
                except psycopg2.errors.ForeignKeyViolation:
                    conn.rollback()
                    st.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –õ–ü–†, –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ –∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º. "
                            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–∏—Ç—å –õ–ü–†–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.")


    # –§—É–Ω–∫—Ü–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –õ–ü–†
    def view_decision_makers():
        with get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT last_name, first_name, middle_name, age FROM decision_makers")
                rows = cur.fetchall()
        df = pd.DataFrame(rows, columns=["–§–∞–º–∏–ª–∏—è", "–ò–º—è", "–û—Ç—á–µ—Å—Ç–≤–æ", "–í–æ–∑—Ä–∞—Å—Ç"])
        st.dataframe(df, use_container_width=True)

    # UI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –õ–ü–†
    action = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –õ–ü–†", "–î–æ–±–∞–≤–∏—Ç—å –õ–ü–†", "–ò–∑–º–µ–Ω–∏—Ç—å –õ–ü–†", "–£–¥–∞–ª–∏—Ç—å –õ–ü–†"])

    if action == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –õ–ü–†":
        view_decision_makers()

    elif action == "–î–æ–±–∞–≤–∏—Ç—å –õ–ü–†":
        last_name = st.text_input("–§–∞–º–∏–ª–∏—è")
        first_name = st.text_input("–ò–º—è")
        middle_name = st.text_input("–û—Ç—á–µ—Å—Ç–≤–æ")
        age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", min_value=18, max_value=100)
        if st.button("–î–æ–±–∞–≤–∏—Ç—å"):
            add_dm(last_name, first_name, middle_name, age)

    elif action == "–ò–∑–º–µ–Ω–∏—Ç—å –õ–ü–†":
        with get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT dm_id, last_name, first_name, middle_name, age FROM decision_makers")
                dms = cur.fetchall()

        if not dms:
            st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –õ–ü–† –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
            return

        dm_map = {f"{d[1]} {d[2]} {d[3]}, {d[4]} –ª–µ—Ç": d[0] for d in dms}
        selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –õ–ü–†", list(dm_map.keys()))
        dm_id = dm_map[selected]

        last_name = st.text_input("–ù–æ–≤–∞—è —Ñ–∞–º–∏–ª–∏—è")
        first_name = st.text_input("–ù–æ–≤–æ–µ –∏–º—è")
        middle_name = st.text_input("–ù–æ–≤–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ")
        age = st.number_input("–ù–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç", min_value=18, max_value=100)
        if st.button("–ò–∑–º–µ–Ω–∏—Ç—å"):
            update_dm(dm_id, last_name, first_name, middle_name, age)


    elif action == "–£–¥–∞–ª–∏—Ç—å –õ–ü–†":
        with get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT dm_id, last_name, first_name, middle_name, age FROM decision_makers")
                dms = cur.fetchall()

        if not dms:
            st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –õ–ü–† –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        dm_map = {f"{d[1]} {d[2]} {d[3]}, {d[4]} –ª–µ—Ç": d[0] for d in dms}
        selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –õ–ü–† –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", list(dm_map.keys()))
        dm_id = dm_map[selected]

        if st.button("–£–¥–∞–ª–∏—Ç—å"):
            delete_dm(dm_id)
