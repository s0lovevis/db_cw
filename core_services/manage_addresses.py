import streamlit as st
import psycopg2
from connect import get_connection
from core_services.logger import log_action
import pandas as pd

def render_manage_addresses():
    log_action("open_manage_addresses_page")
    st.title("üè† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")

    # –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
    def add_address(city, street, house, building):
        if not city or not street or not house:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º).")
            return
        with get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(
                    "INSERT INTO legal_addresses (city, street, house, building) VALUES (%s, %s, %s, %s)",
                    (city, street, house, building)
                )
                conn.commit()
                st.success("–ê–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω.")

    # –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
    def update_address(address_id, city, street, house, building):
        if not city or not street or not house:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º).")
            return
        with get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT 1 FROM legal_addresses WHERE address_id = %s", (address_id,))
                if not cur.fetchone():
                    st.error("–ê–¥—Ä–µ—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                cur.execute(
                    "UPDATE legal_addresses SET city = %s, street = %s, house = %s, building = %s WHERE address_id = %s",
                    (city, street, house, building, address_id)
                )
                conn.commit()
                st.success("–ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω.")

    # –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞

    def delete_address(address_id: int) -> None:
        with get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT 1 FROM legal_addresses WHERE address_id = %s", (address_id,))
                if not cur.fetchone():
                    st.error("–ê–¥—Ä–µ—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                try:
                    cur.execute("DELETE FROM legal_addresses WHERE address_id = %s", (address_id,))
                    conn.commit()
                    st.success("–ê–¥—Ä–µ—Å —É–¥–∞–ª–µ–Ω.")
                except psycopg2.errors.ForeignKeyViolation:
                    conn.rollback()
                    st.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å, –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º. "
                            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤–º–µ—Å—Ç–æ –µ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è.")


    # –§—É–Ω–∫—Ü–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤
    def view_addresses():
        with get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT address_id, city, street, house, building FROM legal_addresses")
                rows = cur.fetchall()
        df = pd.DataFrame(rows, columns=["ID –∞–¥—Ä–µ—Å–∞", "–ì–æ—Ä–æ–¥", "–£–ª–∏—Ü–∞", "–î–æ–º", "–°—Ç—Ä–æ–µ–Ω–∏–µ"])
        st.dataframe(df, use_container_width=True)

    # UI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞–º–∏
    action = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–¥—Ä–µ—Å–∞", "–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å", "–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", "–£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å"])

    if action == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–¥—Ä–µ—Å–∞":
        log_action("view_addresses")
        view_addresses()

    elif action == "–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å":
        city = st.text_input("–ì–æ—Ä–æ–¥")
        street = st.text_input("–£–ª–∏—Ü–∞")
        house = st.text_input("–î–æ–º")
        building = st.text_input("–°—Ç—Ä–æ–µ–Ω–∏–µ")
        if st.button("–î–æ–±–∞–≤–∏—Ç—å"):
            log_action("add_address", {
                "city": city, "street": street,
                "house": house, "building": building
            })
            add_address(city, street, house, building)

    elif action == "–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å":
        with get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT address_id, city, street, house, building FROM legal_addresses")
                addresses = cur.fetchall()

        if not addresses:
            st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
            return

        address_map = {f"{a[1]}, {a[2]}, {a[3]}, {a[4]}": a[0] for a in addresses}
        selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å", list(address_map.keys()))
        address_id = address_map[selected]

        city = st.text_input("–ù–æ–≤—ã–π –≥–æ—Ä–æ–¥")
        street = st.text_input("–ù–æ–≤–∞—è —É–ª–∏—Ü–∞")
        house = st.text_input("–ù–æ–≤—ã–π –¥–æ–º")
        building = st.text_input("–ù–æ–≤–æ–µ —Å—Ç—Ä–æ–µ–Ω–∏–µ")
        if st.button("–ò–∑–º–µ–Ω–∏—Ç—å"):
            update_address(address_id, city, street, house, building)


    elif action == "–£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å":
        with get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT address_id, city, street, house, building FROM legal_addresses")
                addresses = cur.fetchall()

        if not addresses:
            st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        address_map = {f"{a[1]}, {a[2]}, {a[3]}, {a[4]}": a[0] for a in addresses}
        selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", list(address_map.keys()))
        address_id = address_map[selected]

        if st.button("–£–¥–∞–ª–∏—Ç—å"):
            delete_address(address_id)
