import streamlit as st
from connect import get_connection, get_redis_connection
import json, uuid, datetime

# –û—Å–Ω–æ–≤–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏
def render_manage_tasks():
    st.title("üìã –ü–∞–Ω–µ–ª—å —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏")
    tabs = st.tabs(["–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "–ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è", "–í—Å–µ –∑–∞–¥–∞–Ω–∏—è"])
    with tabs[0]: create_task_form()
    with tabs[1]: show_my_tasks()
    with tabs[2]: show_all_tasks()

# –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
def create_task_form():
    st.subheader("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
    types = load_task_types()
    users = load_users_for_assignment()
    if not types or not users:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.")
        return

    type_choice = st.selectbox("–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è", [t['name_ru'] for t in types])
    selected_type = next(t for t in types if t['name_ru']==type_choice)

    assignee = st.selectbox(
        "–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", [u['username'] for u in users]
    )
    description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è", height=100)

    if st.button("–°–æ–∑–¥–∞—Ç—å"):  
        if not description:
            st.warning("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return
        create_task(selected_type['type_id'], assignee, description)
        st.success("–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
def show_my_tasks():
    user = st.session_state.username
    tabs = st.tabs(["–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –º–Ω–µ", "–°–æ–∑–¥–∞–Ω–Ω—ã–µ –º–Ω–æ–π"])
    with tabs[0]: render_task_list(get_tasks('assignee', user), is_assignee=True)
    with tabs[1]: render_task_list(get_tasks('creator', user), is_assignee=False)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
def show_all_tasks():
    if st.session_state.role != 'admin':
        st.info("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è.")
        return
    render_task_list(get_tasks('all'), is_assignee=False)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π
def render_task_list(tasks, is_assignee=False):
    if not tasks:
        st.info("–ó–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.")
        return
    for task in tasks:
        created = task['created_at'].strftime('%d.%m.%Y %H:%M')
        status = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' if task['completed_at'] else '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'
        with st.expander(f"{task['type_name']} ({created}) ‚Äî {status}"):
            st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {task['description']}")
            st.write(f"**–°–æ–∑–¥–∞—Ç–µ–ª—å:** {task['creator_username']}")
            st.write(f"**–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {task['assignee_username']}")
            if is_assignee and not task['completed_at']:
                if st.button("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", key=f"complete_{task['task_id']}"):
                    complete_task(task['task_id'])
                    st.success("–ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                    st.rerun()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π –∏–∑ –ë–î
def load_task_types():
    with get_connection() as conn:
        cur = conn.cursor()
        cur.execute("SELECT type_id, name_ru FROM task_types")
        return [{'type_id': t[0], 'name_ru': t[1]} for t in cur.fetchall()]

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
def load_users_for_assignment():
    with get_connection() as conn:
        cur = conn.cursor()
        cur.execute(
            "SELECT u.username, r.name FROM users u JOIN roles r ON u.role_id=r.role_id"
        )
        rows = cur.fetchall()
    role = st.session_state.role
    me = st.session_state.username
    if role == 'admin':
        # –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–∫–ª–∞–¥–∞
        return [{'username': u[0]} for u in rows if u[1] in ('manager', 'warehouse_worker')]
    elif role in ('manager', 'warehouse_worker'):
        # –ú–µ–Ω–µ–¥–∂–µ—Ä –∏ —Å–∫–ª–∞–¥ –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –Ω–∞ –≤—Å–µ—Ö –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞
        return [{'username': u[0]} for u in rows if u[1] != 'admin']
    return []

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: –∑–∞–ø–∏—Å—å –≤ Postgres –∏ Redis
def create_task(type_id, assignee, description):
    creator = st.session_state.username
    now_iso = datetime.datetime.utcnow().isoformat()
    with get_connection() as conn:
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO tasks (type_id, creator_username, assignee_username) VALUES (%s,%s,%s) RETURNING task_id",
            (type_id, creator, assignee)
        )
        db_id = cur.fetchone()[0]
        conn.commit()
    r = get_redis_connection()
    key = f"task:{db_id}"
    data = {
        'task_id': db_id,
        'type_id': type_id,
        'type_name': next(t['name_ru'] for t in load_task_types() if t['type_id']==type_id),
        'creator_username': creator,
        'assignee_username': assignee,
        'description': description,
        'created_at': now_iso,
        'completed_at': None
    }
    payload = json.dumps(data)
    r.set(key, payload)
    r.sadd(f"user:{creator}:created", db_id)
    r.sadd(f"user:{assignee}:assigned", db_id)
    r.sadd("tasks:all", db_id)

# –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î –∏ Redis
def complete_task(task_id):
    now_iso = datetime.datetime.utcnow().isoformat()
    with get_connection() as conn:
        cur = conn.cursor()
        cur.execute("UPDATE tasks SET completed_at=NOW() WHERE task_id=%s", (task_id,))
        conn.commit()
    r = get_redis_connection()
    key = f"task:{task_id}"
    data = json.loads(r.get(key))
    data['completed_at'] = now_iso
    r.set(key, json.dumps(data))

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π –∏–∑ Redis
def get_tasks(mode, username=None):
    r = get_redis_connection()
    if mode == 'assignee':
        ids = r.smembers(f"user:{username}:assigned")
    elif mode == 'creator':
        ids = r.smembers(f"user:{username}:created")
    else:
        ids = r.smembers("tasks:all")
    tasks = []
    for tid in ids:
        tid = tid.decode() if isinstance(tid, bytes) else tid
        raw = r.get(f"task:{tid}")
        if not raw:
            continue
        task = json.loads(raw)
        task['created_at'] = datetime.datetime.fromisoformat(task['created_at'])
        if task['completed_at']:
            task['completed_at'] = datetime.datetime.fromisoformat(task['completed_at'])
        tasks.append(task)
    return sorted(tasks, key=lambda x: x['created_at'], reverse=True)
